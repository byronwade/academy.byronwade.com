---
alwaysApply: true
description: Next.js 15 & Vercel Best Practices with Latest Features
---

# Next.js 15 & Vercel Best Practices Guide

## Turbopack Development (Next.js 15)
- **ALWAYS** enable Turbopack for development builds:
  ```json
  // package.json
  "scripts": {
    "dev": "next dev --turbo"
  }
  ```
- **Or configure in next.config.js**:
  ```javascript
  module.exports = {
    experimental: {
      turbo: {}
    }
  }
  ```

## Vercel Analytics & Speed Insights Integration
- **MANDATORY** for production apps - install and configure:
  ```bash
  npm install @vercel/analytics @vercel/speed-insights
  ```
- **Add to root layout**:
  ```tsx
  import { Analytics } from '@vercel/analytics/react'
  import { SpeedInsights } from '@vercel/speed-insights/next'
  
  export default function RootLayout({ children }) {
    return (
      <html>
        <body>
          {children}
          <Analytics />
          <SpeedInsights />
        </body>
      </html>
    )
  }
  ```

## Image Optimization (Vercel Conformance)
- **ALWAYS** use `next/image` instead of `<img>` tags:
  ```tsx
  import Image from 'next/image'
  
  // Correct - above the fold with priority
  <Image
    src="/hero.jpg"
    alt="Hero image"
    width={1920}
    height={1080}
    priority
    sizes="(max-width: 768px) 100vw, 50vw"
  />
  
  // Correct - responsive with fill
  <div style={{ position: 'relative', width: '100%', height: '400px' }}>
    <Image
      src="/banner.jpg"
      alt="Banner"
      fill
      style={{ objectFit: 'cover' }}
    />
  </div>
  ```

## Script Optimization with next/script
- **REQUIRED** for all third-party scripts:
  ```tsx
  import Script from 'next/script'
  
  // Analytics - load after interactive
  <Script
    src="https://www.googletagmanager.com/gtag/js?id=GA_ID"
    strategy="afterInteractive"
  />
  
  // Chat widgets - lazy load
  <Script
    src="https://widget.intercom.io/widget.js"
    strategy="lazyOnload"
  />
  
  // Worker strategy for heavy scripts (experimental)
  <Script
    src="https://analytics.example.com/script.js"
    strategy="worker"
  />
  ```

## Native Fetch Usage (Vercel Conformance)
- **ALWAYS** use native fetch instead of axios/other libraries:
  ```tsx
  // Correct - with caching and revalidation
  const data = await fetch('https://api.example.com/data', {
    next: { 
      revalidate: 3600, // 1 hour
      tags: ['products'] 
    }
  })
  
  // Correct - with error handling
  try {
    const response = await fetch('/api/users')
    if (!response.ok) throw new Error('Failed to fetch')
    const users = await response.json()
  } catch (error) {
    console.error('Fetch error:', error)
  }
  ```