---
alwaysApply: true
description: Vercel Monitoring & Analytics Best Practices
---

# Vercel Monitoring & Analytics

## Real User Monitoring Setup
- **Essential monitoring stack** for production:
  ```tsx
  // app/layout.tsx
  import { Analytics } from '@vercel/analytics/react'
  import { SpeedInsights } from '@vercel/speed-insights/next'
  import { WebVitals } from '@vercel/web-vitals'
  
  export default function RootLayout({ children }) {
    return (
      <html>
        <body>
          {children}
          <Analytics />
          <SpeedInsights />
          <WebVitals />
        </body>
      </html>
    )
  }
  ```

## Custom Event Tracking
- **Track business metrics** with Vercel Analytics:
  ```tsx
  import { track } from '@vercel/analytics'
  
  function CourseEnrollment({ courseId }: { courseId: string }) {
    const handleEnroll = async () => {
      // Track conversion event
      track('course_enrollment', {
        course_id: courseId,
        price: course.price,
        category: course.category
      })
      
      await enrollInCourse(courseId)
    }
    
    return (
      <button onClick={handleEnroll}>
        Enroll Now
      </button>
    )
  }
  
  // Track page views with custom data
  function CoursePage({ course }) {
    useEffect(() => {
      track('course_view', {
        course_id: course.id,
        course_level: course.level,
        viewing_time: Date.now()
      })
    }, [course.id])
    
    return <CourseContent course={course} />
  }
  ```

## Performance Monitoring
- **Monitor Core Web Vitals** with custom reporting:
  ```tsx
  // lib/vitals.ts
  import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals'
  
  function sendToAnalytics(metric: any) {
    // Send to your analytics service
    if (process.env.NODE_ENV === 'production') {
      fetch('/api/analytics', {
        method: 'POST',
        body: JSON.stringify(metric),
        headers: { 'Content-Type': 'application/json' }
      })
    }
  }
  
  export function trackWebVitals() {
    getCLS(sendToAnalytics)
    getFID(sendToAnalytics)
    getFCP(sendToAnalytics)
    getLCP(sendToAnalytics)
    getTTFB(sendToAnalytics)
  }
  ```

## Error Tracking & Debugging
- **Comprehensive error handling**:
  ```tsx
  // app/global-error.tsx
  'use client'
  
  import { track } from '@vercel/analytics'
  import { useEffect } from 'react'
  
  export default function GlobalError({ error, reset }) {
    useEffect(() => {
      // Track errors to analytics
      track('application_error', {
        error_message: error.message,
        error_stack: error.stack,
        user_agent: navigator.userAgent,
        timestamp: new Date().toISOString()
      })
    }, [error])
    
    return (
      <html>
        <body>
          <h2>Something went wrong!</h2>
          <button onClick={() => reset()}>Try again</button>
        </body>
      </html>
    )
  }
  
  // API route error handling
  export async function GET() {
    try {
      const data = await fetchData()
      return Response.json(data)
    } catch (error) {
      track('api_error', {
        endpoint: '/api/courses',
        error: error.message
      })
      
      return Response.json(
        { error: 'Internal Server Error' },
        { status: 500 }
      )
    }
  }
  ```

## A/B Testing with Vercel
- **Feature flags and experiments**:
  ```tsx
  import { cookies } from 'next/headers'
  import { track } from '@vercel/analytics'
  
  async function getVariant() {
    const cookieStore = cookies()
    const variant = cookieStore.get('ab-test-variant')?.value || 'control'
    
    return variant
  }
  
  export default async function HomePage() {
    const variant = await getVariant()
    
    // Track variant exposure
    track('ab_test_exposure', {
      test_name: 'homepage_hero',
      variant: variant
    })
    
    return (
      <div>
        {variant === 'variant_b' ? (
          <NewHeroSection />
        ) : (
          <OriginalHeroSection />
        )}
      </div>
    )
  }
  ```

## Log Monitoring
- **Structured logging** for better debugging:
  ```tsx
  // lib/logger.ts
  export const logger = {
    info: (message: string, data?: any) => {
      console.log(JSON.stringify({
        level: 'info',
        message,
        data,
        timestamp: new Date().toISOString(),
        deployment: process.env.VERCEL_DEPLOYMENT_ID
      }))
    },
    error: (message: string, error?: Error) => {
      console.error(JSON.stringify({
        level: 'error',
        message,
        error: error?.message,
        stack: error?.stack,
        timestamp: new Date().toISOString(),
        deployment: process.env.VERCEL_DEPLOYMENT_ID
      }))
    }
  }
  ```